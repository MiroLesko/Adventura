!function(e,t,r){"undefined"!=typeof module&&module.exports?module.exports=r():"function"==typeof define&&define.amd?define(r):t[e]=r()}("reqwest",this,function(){function succeed(e){var t=protocolRe.exec(e.url);return t=t&&t[1]||context.location.protocol,httpsRe.test(t)?twoHundo.test(e.request.status):!!e.request.response}function handleReadyState(e,t,r){return function(){return e._aborted?r(e.request):e._timedOut?r(e.request,"Request is aborted: timeout"):void(e.request&&4==e.request[readyState]&&(e.request.onreadystatechange=noop,succeed(e)?t(e.request):r(e.request)))}}function setHeaders(e,t){var r,s=t.headers||{};s.Accept=s.Accept||defaultHeaders.accept[t.type]||defaultHeaders.accept["*"];var n="undefined"!=typeof FormData&&t.data instanceof FormData;t.crossOrigin||s[requestedWith]||(s[requestedWith]=defaultHeaders.requestedWith),s[contentType]||n||(s[contentType]=t.contentType||defaultHeaders.contentType);for(r in s)s.hasOwnProperty(r)&&"setRequestHeader"in e&&e.setRequestHeader(r,s[r])}function setCredentials(e,t){"undefined"!=typeof t.withCredentials&&"undefined"!=typeof e.withCredentials&&(e.withCredentials=!!t.withCredentials)}function generalCallback(e){lastValue=e}function urlappend(e,t){return e+(/\?/.test(e)?"&":"?")+t}function handleJsonp(e,t,r,s){var n=uniqid++,a=e.jsonpCallback||"callback",o=e.jsonpCallbackName||reqwest.getcallbackPrefix(n),i=new RegExp("((^|\\?|&)"+a+")=([^&]+)"),l=s.match(i),u=doc.createElement("script"),p=0,c=navigator.userAgent.indexOf("MSIE 10.0")!==-1;return l?"?"===l[3]?s=s.replace(i,"$1="+o):o=l[3]:s=urlappend(s,a+"="+o),context[o]=generalCallback,u.type="text/javascript",u.src=s,u.async=!0,"undefined"==typeof u.onreadystatechange||c||(u.htmlFor=u.id="_reqwest_"+n),u.onload=u.onreadystatechange=function(){return!(u[readyState]&&"complete"!==u[readyState]&&"loaded"!==u[readyState]||p)&&(u.onload=u.onreadystatechange=null,u.onclick&&u.onclick(),t(lastValue),lastValue=void 0,head.removeChild(u),void(p=1))},head.appendChild(u),{abort:function(){u.onload=u.onreadystatechange=null,r({},"Request is aborted: timeout",{}),lastValue=void 0,head.removeChild(u),p=1}}}function getRequest(e,t){var r,s=this.o,n=(s.method||"GET").toUpperCase(),a="string"==typeof s?s:s.url,o=s.processData!==!1&&s.data&&"string"!=typeof s.data?reqwest.toQueryString(s.data):s.data||null,i=!1;return"jsonp"!=s.type&&"GET"!=n||!o||(a=urlappend(a,o),o=null),"jsonp"==s.type?handleJsonp(s,e,t,a):(r=s.xhr&&s.xhr(s)||xhr(s),r.open(n,a,s.async!==!1),setHeaders(r,s),setCredentials(r,s),context[xDomainRequest]&&r instanceof context[xDomainRequest]?(r.onload=e,r.onerror=t,r.onprogress=function(){},i=!0):r.onreadystatechange=handleReadyState(this,e,t),s.before&&s.before(r),i?setTimeout(function(){r.send(o)},200):r.send(o),r)}function Reqwest(e,t){this.o=e,this.fn=t,init.apply(this,arguments)}function setType(e){if(null!==e)return e.match("json")?"json":e.match("javascript")?"js":e.match("text")?"html":e.match("xml")?"xml":void 0}function init(o,fn){function complete(e){for(o.timeout&&clearTimeout(self.timeout),self.timeout=null;self._completeHandlers.length>0;)self._completeHandlers.shift()(e)}function success(resp){var type=o.type||resp&&setType(resp.getResponseHeader("Content-Type"));resp="jsonp"!==type?self.request:resp;var filteredResponse=globalSetupOptions.dataFilter(resp.responseText,type),r=filteredResponse;try{resp.responseText=r}catch(e){}if(r)switch(type){case"json":try{resp=context.JSON?context.JSON.parse(r):eval("("+r+")")}catch(err){return error(resp,"Could not parse JSON in response",err)}break;case"js":resp=eval(r);break;case"html":resp=r;break;case"xml":resp=resp.responseXML&&resp.responseXML.parseError&&resp.responseXML.parseError.errorCode&&resp.responseXML.parseError.reason?null:resp.responseXML}for(self._responseArgs.resp=resp,self._fulfilled=!0,fn(resp),self._successHandler(resp);self._fulfillmentHandlers.length>0;)resp=self._fulfillmentHandlers.shift()(resp);complete(resp)}function timedOut(){self._timedOut=!0,self.request.abort()}function error(e,t,r){for(e=self.request,self._responseArgs.resp=e,self._responseArgs.msg=t,self._responseArgs.t=r,self._erred=!0;self._errorHandlers.length>0;)self._errorHandlers.shift()(e,t,r);complete(e)}this.url="string"==typeof o?o:o.url,this.timeout=null,this._fulfilled=!1,this._successHandler=function(){},this._fulfillmentHandlers=[],this._errorHandlers=[],this._completeHandlers=[],this._erred=!1,this._responseArgs={};var self=this;fn=fn||function(){},o.timeout&&(this.timeout=setTimeout(function(){timedOut()},o.timeout)),o.success&&(this._successHandler=function(){o.success.apply(o,arguments)}),o.error&&this._errorHandlers.push(function(){o.error.apply(o,arguments)}),o.complete&&this._completeHandlers.push(function(){o.complete.apply(o,arguments)}),this.request=getRequest.call(this,success,error)}function reqwest(e,t){return new Reqwest(e,t)}function normalize(e){return e?e.replace(/\r?\n/g,"\r\n"):""}function serial(e,t){var r,s,n,a,o=e.name,i=e.tagName.toLowerCase(),l=function(e){e&&!e.disabled&&t(o,normalize(e.attributes.value&&e.attributes.value.specified?e.value:e.text))};if(!e.disabled&&o)switch(i){case"input":/reset|button|image|file/i.test(e.type)||(r=/checkbox/i.test(e.type),s=/radio/i.test(e.type),n=e.value,(!(r||s)||e.checked)&&t(o,normalize(r&&""===n?"on":n)));break;case"textarea":t(o,normalize(e.value));break;case"select":if("select-one"===e.type.toLowerCase())l(e.selectedIndex>=0?e.options[e.selectedIndex]:null);else for(a=0;e.length&&a<e.length;a++)e.options[a].selected&&l(e.options[a])}}function eachFormElement(){var e,t,r=this,s=function(e,t){var s,n,a;for(s=0;s<t.length;s++)for(a=e[byTag](t[s]),n=0;n<a.length;n++)serial(a[n],r)};for(t=0;t<arguments.length;t++)e=arguments[t],/input|select|textarea/i.test(e.tagName)&&serial(e,r),s(e,["input","select","textarea"])}function serializeQueryString(){return reqwest.toQueryString(reqwest.serializeArray.apply(null,arguments))}function serializeHash(){var e={};return eachFormElement.apply(function(t,r){t in e?(e[t]&&!isArray(e[t])&&(e[t]=[e[t]]),e[t].push(r)):e[t]=r},arguments),e}function buildParams(e,t,r,s){var n,a,o,i=/\[\]$/;if(isArray(t))for(a=0;t&&a<t.length;a++)o=t[a],r||i.test(e)?s(e,o):buildParams(e+"["+("object"==typeof o?a:"")+"]",o,r,s);else if(t&&"[object Object]"===t.toString())for(n in t)buildParams(e+"["+n+"]",t[n],r,s);else s(e,t)}var context=this;if("window"in context)var doc=document,byTag="getElementsByTagName",head=doc[byTag]("head")[0];else{var XHR2;try{XHR2=require("xhr2")}catch(ex){throw new Error("Peer dependency `xhr2` required! Please npm install xhr2")}}var httpsRe=/^http/,protocolRe=/(^\w+):\/\//,twoHundo=/^(20\d|1223)$/,readyState="readyState",contentType="Content-Type",requestedWith="X-Requested-With",uniqid=0,callbackPrefix="reqwest_"+ +new Date,lastValue,xmlHttpRequest="XMLHttpRequest",xDomainRequest="XDomainRequest",noop=function(){},isArray="function"==typeof Array.isArray?Array.isArray:function(e){return e instanceof Array},defaultHeaders={contentType:"application/x-www-form-urlencoded",requestedWith:xmlHttpRequest,accept:{"*":"text/javascript, text/html, application/xml, text/xml, */*",xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript",js:"application/javascript, text/javascript"}},xhr=function(e){if(e.crossOrigin===!0){var t=context[xmlHttpRequest]?new XMLHttpRequest:null;if(t&&"withCredentials"in t)return t;if(context[xDomainRequest])return new XDomainRequest;throw new Error("Browser does not support cross-origin requests")}return context[xmlHttpRequest]?new XMLHttpRequest:XHR2?new XHR2:new ActiveXObject("Microsoft.XMLHTTP")},globalSetupOptions={dataFilter:function(e){return e}};return Reqwest.prototype={abort:function(){this._aborted=!0,this.request.abort()},retry:function(){init.call(this,this.o,this.fn)},then:function(e,t){return e=e||function(){},t=t||function(){},this._fulfilled?this._responseArgs.resp=e(this._responseArgs.resp):this._erred?t(this._responseArgs.resp,this._responseArgs.msg,this._responseArgs.t):(this._fulfillmentHandlers.push(e),this._errorHandlers.push(t)),this},always:function(e){return this._fulfilled||this._erred?e(this._responseArgs.resp):this._completeHandlers.push(e),this},fail:function(e){return this._erred?e(this._responseArgs.resp,this._responseArgs.msg,this._responseArgs.t):this._errorHandlers.push(e),this},"catch":function(e){return this.fail(e)}},reqwest.serializeArray=function(){var e=[];return eachFormElement.apply(function(t,r){e.push({name:t,value:r})},arguments),e},reqwest.serialize=function(){if(0===arguments.length)return"";var e,t,r=Array.prototype.slice.call(arguments,0);return e=r.pop(),e&&e.nodeType&&r.push(e)&&(e=null),e&&(e=e.type),t="map"==e?serializeHash:"array"==e?reqwest.serializeArray:serializeQueryString,t.apply(null,r)},reqwest.toQueryString=function(e,t){var r,s,n=t||!1,a=[],o=encodeURIComponent,i=function(e,t){t="function"==typeof t?t():null==t?"":t,a[a.length]=o(e)+"="+o(t)};if(isArray(e))for(s=0;e&&s<e.length;s++)i(e[s].name,e[s].value);else for(r in e)e.hasOwnProperty(r)&&buildParams(r,e[r],n,i);return a.join("&").replace(/%20/g,"+")},reqwest.getcallbackPrefix=function(){return callbackPrefix},reqwest.compat=function(e,t){return e&&(e.type&&(e.method=e.type)&&delete e.type,e.dataType&&(e.type=e.dataType),e.jsonpCallback&&(e.jsonpCallbackName=e.jsonpCallback)&&delete e.jsonpCallback,e.jsonp&&(e.jsonpCallback=e.jsonp)),new Reqwest(e,t)},reqwest.ajaxSetup=function(e){e=e||{};for(var t in e)globalSetupOptions[t]=e[t]},reqwest});

/*
 * url: name of server where is sokrates API
 * id: interview uuid for showing
 * elementId: HTML element id, where content to be generated
 *
 * layoutType:
 * 1 - only QuestionForm
 * 2 - both QuestionForm & QuestionListBox
 * 3 - only QuestionListBox
 */

function interview(url, id, elementId, layoutType) {
  React.render(React.createElement(InterviewBox, {
    url: url,
    id: id,
    layoutType: layoutType
  }), document.getElementById(elementId));
}


var InterviewBox = React.createClass({displayName: "InterviewBox",
  getInitialState: function() {
    return {
      created_at: '',
      is_published: false,
      is_open: false,
      title: 'Interview',
      description: '',
      questions: [],
      isLoading: false,
      message: null,
      messageType: null
    };
  },
  componentWillMount: function() {
    this.downloadItems(this.getUrl());
  },
  handleReload: function(e) {
    e.preventDefault();
    this.downloadItems(this.getUrl());
  },
  getUrl: function() {
    if (!this.state.url) {
      url = this.props.url + '/api/v1/interview?id=' + this.props.id;
      return url;
    } else {
      return this.state.url;
    }
  },
  downloadItems: function(remoteUrl) {
    this.setState({isLoading: true});

    reqwest({
      url: remoteUrl,
      timeout: 6000,
      dataType: 'json',
      cache: false,
      crossOrigin: true,

      success: function(response) {
        if (response.data === undefined || response.data.title === undefined) {
          this.setState({isLoading: false, messageType: 'error', message: 'Nastal problem pri komunikacii so serverom.'});
          return;
        }

        var loadedQuestions = response.data.questions.data.map(function(item) {
          return {
            id: item.id,
            created_at: item.created_at,
            answered_at: item.answered_at,
            is_published: item.is_published,
            user_name: item.user_name,
            question: item.question,
            answer: item.answer
          };
        });

        var loadedQuestions = loadedQuestions.filter(function(item) {
          return item.is_published === true;
        });

        loadedQuestions.sort(function compare(a, b) {
          if (a.answered_at > b.answered_at)
            return -1;
          if (a.answered_at < b.answered_at)
            return 1;
          return 0;
        });

        this.setState({is_published: response.data.is_published});
        this.setState({is_open: response.data.is_open});
        this.setState({title: response.data.title});
        this.setState({description: response.data.description});
        this.setState({questions: loadedQuestions});
        this.setState({isLoading: false});
      }.bind(this),

      error: function(xhr, status, err) {
        this.setState({isLoading: false, messageType: 'error', message: 'Nastal problem pri komunikacii so serverom.'});
      }.bind(this)

    });
  },
  render: function() {
    var showQuestionForm = (this.props.layoutType <= 2 && this.state.is_open === true);
    var showQuestionListBox = (this.props.layoutType >= 2 && this.state.is_published === true);
    return(
      React.createElement("div", {className: "box-sokrates"}, 
        React.createElement("div", {className: "rte selectionShareable"}, React.createElement("p", null, this.state.description)), 
        showQuestionForm &&
          React.createElement(QuestionForm, {
            url: this.props.url, 
            id: this.props.id}
          ), 
        
        React.createElement("div", {className: "box-minute"}, 
          showQuestionListBox &&
            React.createElement("header", null, 
              React.createElement("h1", null, "Diskusia"), 
              React.createElement("div", {className: "refresh"}, 
                React.createElement("a", {href: "#", className: "btn", onClick: (e) => this.handleReload(e)}, 
                  "Refresh"
                )
              )
            ), 
          
          showQuestionListBox &&
            React.createElement(QuestionsListBox, {
              respondent: this.state.title, 
              questions: this.state.questions}
            )
          
        )
      )
    );
  }
});


var QuestionsListBox = React.createClass({displayName: "QuestionsListBox",
  render: function() {
    var respondent = this.props.respondent;
    var counter = this.props.questions.length;
    counter++;

    var items = this.props.questions.map(function(item) {
      counter--;
      itemDate = new Date(item.created_at);
      return (
        React.createElement(QuestionBox, {
          key: item.id, 
          id: item.id, 
          counter: counter, 
          created_at: item.created_at, 
          is_published: item.is_published, 
          user_name: item.user_name, 
          question: item.question, 
          respondent: respondent, 
          answer: item.answer}
        )
      );
    });

    return (
      React.createElement("div", {className: "minutes questions"}, 
        items
      )
    );
  }
});


var QuestionBox = React.createClass({displayName: "QuestionBox",
  render: function() {
    var articleClasses = ['questionBox'];
    if (!this.props.is_published) {
      articleClasses.push('hidden');
    }

    var itemDate = new Date(this.props.created_at);
    var displayDate = itemDate.getHours() + ':' + (itemDate.getMinutes() < 10 ? '0' + itemDate.getMinutes() : itemDate.getMinutes());
    var displayTime = React.createElement("time", {dateTime: itemDate.toISOString()}, displayDate);

    if (!this.props.user_name) {
      var userName = "Anonym";
    } else {
      var userName = this.props.user_name;
    }

    return (
      React.createElement("article", {className: articleClasses.join(' ')}, 
        React.createElement("time", null, "Otázka č.", this.props.counter), 
        React.createElement("h1", null, userName), 
        React.createElement("p", null, this.props.question), 
        React.createElement("div", {className: "answer"}, 
          React.createElement("h1", null, this.props.respondent), 
          React.createElement("p", null, this.props.answer)
        )
      )
    );
  }
});


var QuestionForm = React.createClass({displayName: "QuestionForm",
  getInitialState: function() {
    return {
      data: [],
      isLoading: false,
      message: null,
      messageType: null
    };
  },
  handleQuestionSubmit: function(e) {
    e.preventDefault();
    this.setState({isLoading: true});
    var addFormUrl = this.props.url + '/api/v1/question';
    var interviewIdFormState = React.findDOMNode(this.refs.interviewId).value;
    var userNameFormState = React.findDOMNode(this.refs.userName).value;
    var questionFormState = React.findDOMNode(this.refs.question).value;

    if(!questionFormState) {
      this.setState({isLoading: false, messageType: 'error', message: 'Prosím zadajte otázku.'});
      return;
    }

    reqwest({
      url: addFormUrl,
      method: 'post',
      data: { interview_id: interviewIdFormState, user_name: userNameFormState, question: questionFormState },

      success: function(response) {
        if (response.data === undefined || response.data.question === undefined) {
          this.setState({isLoading: false, messageType: 'error', message: 'Chyba komunikácie so serverom.'});
          return;
        }
        this.setState({isLoading: false, messageType: 'info', message: 'Vaša otázka bola zaznamenaná.'});
      }.bind(this),

      error: function(xhr, status, err) {
        this.setState({isLoading: false, messageType: 'error', message: 'Chyba komunikácie so serverom.'});
      }.bind(this)

    });

    React.findDOMNode(this.refs.question).value = "";
    React.findDOMNode(this.refs.userName).value = "";
  },
  render: function() {
    return(
      React.createElement("div", {className: "b-forms box-shadow box-padding"}, 
        React.createElement("form", {method: "post", onSubmit: this.handleQuestionSubmit}, 
          React.createElement("fieldset", {className: "fields"}, 
            React.createElement("h2", null, "Opýtajte sa hosťa"), 
            React.createElement("input", {type: "hidden", name: "interview_id", ref: "interviewId", value: this.props.id}), 
            React.createElement("label", {className: "text wide req"}, 
              React.createElement("span", {className: "label"}, "Meno *"), 
              React.createElement("input", {type: "text", name: "user_name", ref: "userName", placeholder: "Vaše meno"})
            ), 
            React.createElement("label", {className: "textarea req"}, 
              React.createElement("span", {className: "label"}, "Otázka *"), React.createElement("br", null), 
              React.createElement("textarea", {name: "question", ref: "question", placeholder: "Vaša otázka"})
            )
          ), 
          React.createElement("fieldset", {className: "buttons"}, 
            React.createElement("input", {className: "submit", type: "submit", value: "Odoslať"})
          )
        ), 
        React.createElement(MessageBox, {
          type: this.state.messageType, 
          message: this.state.message}
        )
      )
    );
  }
});


var MessageBox = React.createClass({displayName: "MessageBox",
  render: function() {
    var messageStyles = { display: 'none' };
    var messageClass;
    if (this.props.type === 'error') {
      messageStyles = { display: 'block' };
      messageClass = "alert alert-danger";
    }
    if (this.props.type === 'info') {
      messageStyles = { display: 'block' };
      messageClass = "alert alert-success";
    }
    return (
      React.createElement("div", {style: messageStyles, className: messageClass}, 
        React.createElement("div", null, this.props.message)
      )
    );
  }
});
